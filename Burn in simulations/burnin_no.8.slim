initialize() {


        // Use tree-sequence recording to speed up burn-in
        initializeTreeSeq();

        defineConstant('pop_size',100);
        defineConstant('ge_length',70000);
        defineConstant('sweep_site',integerDiv((ge_length+1),2));
        defineConstant('low_site',sweep_site-1);
        defineConstant('high_site',1+sweep_site);

        defineConstant('recombination_rate',0.0025);
        defineConstant('mut_rate',0.025);
        defineConstant('nucleotide_diversity', (4*pop_size*mut_rate)/1+(2*4*pop_size*mut_rate));
        initializeRecombinationRate(recombination_rate);
        initializeMutationRate(mut_rate);

        // m1 is a neutral mutation
        initializeMutationType('m0', 0.5, 'f', 0.0);
        m0.mutationStackPolicy = "l";   

        initializeGenomicElementType('g1', m0, 1.0 );
        initializeGenomicElement(g1, 0, low_site);
        initializeGenomicElement(g1, sweep_site, sweep_site);
        initializeGenomicElement(g1, high_site, ge_length);}

1 early(){
	sim.addSubpop("p0", pop_size);
}

500:39999 late() {
div = calcHeterozygosity(p0.genomes);
if(div >= nucleotide_diversity){
sim.simulationFinished();
sim.treeSeqOutput("burnin_no.8_early.trees");
}
}

// Run burn-in for 30XNe generations
40000 late() {
        // Output recorded tree-sequence
        sim.treeSeqOutput("burnin_no.8.trees");
}



// array burn ins

initialize() {
	// Use tree-sequence recording to speed up burn-in
	initializeTreeSeq();
	defineConstant('ge_length', 70000); //changed to 70kb haplotype size following prev student's thesis
	defineConstant('sweep_site', integerDiv((ge_length + 1), 2)); //just roughly middle of vgsc gene
	defineConstant('low_site', sweep_site - 1);
	defineConstant('high_site', 1 + sweep_site);
	
	
	// Define a neutral mutation
	initializeMutationType('m0', 0.5, 'f', 0.0);
	m0.mutationStackPolicy = "l";
	
	// Initialize genomic types
	initializeGenomicElementType('g1', m0, 1.0);
	initializeGenomicElement(g1, 0, low_site);
	initializeGenomicElement(g1, sweep_site, sweep_site);
	initializeGenomicElement(g1, high_site, ge_length);
	initializeGenomicElementType('g2', m0, 1.0);
	
	
	// Initialize arrays to store simulation parameters
	N_values = integer(27, fill1=0);
	mutation_rates = float(27);
	recombination_rates = float(27);
	burn_in_files = integer(27, fill1=0);
	pi_nucleotide_diversity = float(27);
	
	// Read parameter combinations from parameter combinations.txt file
	i = 0;
	file = readFile("parameter_combinations.txt");
	file = file[substr(file, 0, 1) != "N,"];
	
	for (line in file) {
		tokens = strsplit(line, sep= ",");
		//print("Line:"+ line); 
		//print("Tokens:"+ tokens);  
		N_values[i] = asInteger(tokens[0]);
		mutation_rates[i] = asFloat(tokens[1]);
		recombination_rates[i] = asFloat(tokens[2]);
		burn_in_files[i] = asInteger(tokens[3]);
		//pi_nucleotide_diversity[i] = asFloat(tokens[6]);
		
		i = i + 1;
	}
	
	// Set parameters for current combination
	N = N_values[array_index-1];
	mu = mutation_rates[array_index-1];
	r = recombination_rates[array_index-1];
	//pi = pi_nucleotide_diversity[array_index-1];
	
	//initialise parameters
	initializeMutationRate(mu);
	initializeRecombinationRate(r);
	defineConstant('pop_size', N);
	
	// define function to calculate pi, the nucleotide diversity 
	//if burn in has reached mutation-drift balance, pi is at expected theoretical mean heterozygosity and 
	//pi = theta/(1+2theta)
	//theta is population-scaled mutation rate and is theta=4(Ne)(mutation rate)
	theta = 4*mu*pop_size;
	pi = theta/(1+2*theta);
	//termination_point =1.1*pi;
	
	
	//defineConstant('nucleotide_diversity', pi);
	defineConstant('termination_point', 1.1*pi);
	
	
	//seed is 
	setSeed(seedID);
	print("seedID: " + seedID);
	
	//print out parameters for checking on job logfile
	print("for Array Index, seed:" + array_index + ','+ seedID);
	print("population size:" + pop_size);
	print ("recombination rate:" + r);
	print("mutation rate:" + mu);
	print("1.1*pi is the termination point:" + termination_point);
	//print('terminate at nucleotide diversity:'+ nucleotide_diversity);
	print("genome size:" + ge_length);

}



function (float)estimatepop_Heterozygosity(o<Subpopulation>$ subpop)
{
	sum =0;
	div=0;
	for (individual in sim.subpopulations.individuals) {
		sum = sum + calcPairHeterozygosity(individual.genome1, individual.genome2, infiniteSites = F);
	}
	div = sum/pop_size;
	return div;
}



1 early() {
	//REMEMBER TO DEFINE INDIVIDUAL
	// Make individuals diploid and assign genomes
	for (individual in sim.subpopulations.individuals) {
		individual.addGenomicElement(g1, 1.0);  // Add genome 1
		individual.addGenomicElement(g2, 1.0);  // Add genome 2
	}
	sim.addSubpop("p0", pop_size);
	
	
	//logfile heterozygosity at set timepoints
	log = community.createLogFile("burnin" + array_index + "_logfile2.csv", logInterval=100);
	log.addCycle();
	log.addCustomColumn("Heterozygosity", "estimatepop_Heterozygosity(p0);");
	
	//if taking from burn in early termination
	sim.readFromPopulationFile("burnin_no." + array_index +"_savepoint.trees"); 

}

// print heterozygosity at each timepoint

500:99999 late() {
	// every 100 ticks, calculate heterozygosity
	if (sim.cycle % 100 == 0) {
		div = estimatepop_Heterozygosity(p0);
		catn("tick:" + sim.cycle + ", nucleotide diversity:"+ div);
		
		//if tick number is greater than 5N, check if nucleotide_diversity >10% 
		if (sim.cycle >= 5 * pop_size){
			if (div >= termination_point) {
				sim.simulationFinished();
				catn('number of generations taken: ' + sim.cycle);
				sim.treeSeqOutput("burnin_no." + array_index +"_complete.trees");
			}
			//if simulation is not done, savepoint it
			catn("tick:" + sim.cycle + ", nucleotide diversity:"+ div);
			sim.treeSeqOutput("burnin_no." + array_index +"_savepoint.trees");
		
		}
	}
}



//terminate the burn in at maximum of 100k generations
100000 late() {
	div = estimatepop_Heterozygosity(p0);
	catn("tick:" + sim.cycle + ", nucleotide diversity:"+ div);
	sim.treeSeqOutput("burnin_no." + array_index +"_terminated_100000.trees");
}
// array burn ins

initialize() {
	// Use tree-sequence recording to speed up burn-in
	initializeTreeSeq();
	
	defineConstant("NUM_COMBINATIONS", 27);
	defineConstant("NUM_GENERATIONS", 10000);
	
	// Initialize arrays to store simulation parameters
	N_values = integer(27);
	mutation_rates = float(27);
	recombination_rates = float(27);
	burn_in_files = integer(27);
	
	// Read parameter combinations from parameter combinations.txt file
	//i = 0;
	//file = "parameter combinations.txt";
	//for (line in file) {
	//tokens = strsplit(" \t");
	//N_values[i] = asInteger(tokens[0]);
	//mutation_rates[i] = float(tokens[1]);
	//recombination_rates[i] = float(tokens[2]);
	//burn_in_files[i] = tokens[3];
	//i = i + 1;
	
	// Assign values to N_values
	for (i in 0:8) {
		N_values[i] = 100;
	}
	for (i in 9:17) {
		N_values[i] = 1000;
	}
	for (i in 18:26) {
		N_values[i] = 10000;
	}
	
	// Calculate mutation and recombination rates based on N_values
	for (i in 0:26) {
		mutation_rates[i] = 0.1 / (4 * N_values[i]);
		recombination_rates[i] = 0.1 / (4 * N_values[i]);
	}
	
	// Generate burn_in file numbers
	for (i in 0:26) {
		burn_in_files[i] = i+1; // Assigning file number
	}
	
	
	defineConstant('ge_length', 10000); //changed to 10kb haplotype size following prev student's thesis
	defineConstant('sweep_site', integerDiv((ge_length + 1), 2)); //just roughly middle of vgsc gene
	defineConstant('low_site', sweep_site - 1);
	defineConstant('high_site', 1 + sweep_site);
	
	
	// Define a neutral mutation
	initializeMutationType('m0', 0.5, 'f', 0.0);
	m0.mutationStackPolicy = "l";
	
	// Initialize genomic types
	initializeGenomicElementType('g1', m0, 1.0);
	initializeGenomicElement(g1, 0, low_site);
	initializeGenomicElement(g1, sweep_site, sweep_site);
	initializeGenomicElement(g1, high_site, ge_length);
	initializeGenomicElementType('g2', m0, 1.0);
	
	
	initializeRecombinationRate(0);
	initializeMutationRate(0);
	
}

1 early() {
	// Iterate through parameter combinations
	for (current_combination in 0:(NUM_COMBINATIONS-1)) {
		// Set parameters for current combination
		N = N_values[current_combination]; 
		mu = mutation_rates[current_combination];
		r = recombination_rates[current_combination];
		}
		
		defineConstant('nucleotide_diversity', (4 * N * mu) / (1 + (2 * 4 * N * mu)));
			
		
	sim.addSubpop("p0", N);
	// Make individuals diploid and assign genomes
	for (individual in sim.subpopulations.individuals) {
		individual.addGenomicElement(g1, 1.0);  // Add genome 1
		individual.addGenomicElement(g2, 1.0);  // Add genome 2
	}

}

//this command was later added to various files on the high-performance computer.
1:1000 late(){
	div = calcHeterozygosity(sim.subpopulations.individuals.genomes);
	catn(sim.cycle +","+ div);
}

500:39999 late() {
	div = 0; //initialise div
	// Calculate pair heterozygosity
	for (individual in sim.subpopulations.individuals) {
		div = (div + calcPairHeterozygosity(individual.genome1, individual.genome2, infiniteSites = T))/ pop_size ;
		if (div >= nucleotide_diversity * 1.1) {
			sim.simulationFinished();
			catn('number of generations taken ' + sim.cycle);
			sim.treeSeqOutput("burnin_no." + current_combination+ "_early_10.trees");
		}
	}
}

40000 late() {
	sim.treeSeqOutput("burnin_no." + current_combination+ "._10_.trees");
}



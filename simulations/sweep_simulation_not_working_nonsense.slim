// Initialize parameters
initialize() {
	defineConstant("NUM_COMBINATIONS", 27);
	defineConstant("NUM_GENERATIONS", 10000);
	//defineConstant("CHROMOSOME_3_SIZE", 41200000) //AgamP4 assembly chromosome 3 is roughly 41.2 million
	
	// Initialize arrays to store simulation parameters
	N_values = int[27];
	mutation_rates = float[27];
	recombination_rates = float[27];
	burn_in_files = string[27];
	
	
	//Get job array index from command line
	array_index = getParameter("PBS_ARRAY_INDEX");
	
	// Convert the index to an integer
	array_index = strToInt(array_index);
	
	// Read parameter combinations from parameter combinations.txt file
	i = 0;
	file = "parameter combinations.txt";
	for (line in file) {
		tokens = line.split("\t");
		N_values[i] = int(tokens[0]);
		mutation_rates[i] = float(tokens[1]);
		recombination_rates[i] = float(tokens[2]);
		burn_in_files[i] = tokens[3];
		i = i + 1;
		
		//initialise sweep mutation
		initializeMutationType('m1', 1.0, 'f', 1.0); //vgsc mutation with 1.0 selection coeff, complete dominance, fixed fitness effect
		m0.mutationStackPolicy = "l";
	}
	
	// Main simulation
	main(); {
		initialize();
		
		// Iterate through parameter combinations
		for (current_combination in 1:NUM_COMBINATIONS) {
			if (current_combination == array_index){
				// Read burn-in population from file
				readFromPopulationFile(burn_in_files[current_combination]);
				
				// Set parameters for current combination
				N = N_values[current_combination];
				mu = mutation_rates[current_combination];
				r = recombination_rates[current_combination];
				
				//print out parameters for checking on job logfile
	print("population size:" + pop_size);
	print ("recombination rate:" + recombination_rate);
	print("mutation rate:" + mut_rate);
	print("genome size:" + ge_length);
	
				// Read burn-in population from file
				early() ;{
					sim.readFromPopulationFile(burn_in_files[current_combination]);
					sweep = sim.mutationsOfType(m1);
				}
				
				// Modify mutation to sweep
				1000:100000 ;
				late(); {
					heterozygosity = calcHeterozygosity(sim.subpopulations.individuals.genomes);
					if (heterozygosity >= 0.8 ) {
						sim.simulationFinished();
						catn('number of generations taken ' + sim.cycle);
						sim.treeSeqOutput("combination " + current_combination + " simulation.trees");
					
					}
				}
				
				// Additional late() block for cutoff time point
				100000 ;
				late() ;{
					catn("TIME EXPIRED");
					sim.simulationFinished();
					sim.treeSeqOutput("combination " + current_combination + " simulation_expired.trees");
				}
			}
		}
	}
}




// Run selective sweep simulation for 10,000 generations
//simulateSelectiveSweep(N, mu, r)
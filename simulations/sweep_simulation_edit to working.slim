// Initialize parameters
initialize() {

	defineConstant("NUM_COMBINATIONS", 27);
	//defineConstant("NUM_GENERATIONS", 10000);
	defineConstant('ge_length', 10000); //10kb haplotype 
	defineConstant('sweep_site', integerDiv((ge_length + 1), 2)); //just roughly middle of vgsc gene
	defineConstant('low_site', sweep_site - 1);
	defineConstant('high_site', 1 + sweep_site);
	
	
	// Initialize arrays to store simulation parameters
	N_values = integer(27, fill1=0);
	mutation_rates = float(27);
	recombination_rates = float(27);
	burn_in_files = string(27);
	
	// Read parameter combinations from parameter combinations.txt file
	i = 0;
	file = readFile("C:/CHEYANNE STUFF/ICL Biology/Year 3/Final year project/Estimating-effective-population-size-from-resistance-loci/simulations/parameter_combinations.txt");
	file = file[substr(file, 0, 1) != "N,"];
	
	for (line in file) {
		tokens = strsplit(line, sep= ",");
		//print("Line:"+ line); 
		//print("Tokens:"+ tokens);  
		N_values[i] = asInteger(tokens[0]);
		mutation_rates[i] = asFloat(tokens[1]);
		recombination_rates[i] = asFloat(tokens[2]);
		burn_in_files[i] = asInteger(tokens[3]);
		i = i + 1;
		
		//Get job array index from command line
		array_index = $PBS_ARRAY_INDEX;
		print(type(array_index));
		// Convert the index to an integer
		//array_index = strToInt(array_index);
		
		// Set parameters for current combination
		N = N_values[array_index];
		mu = mutation_rates[array_index];
		r = recombination_rates[array_index];
		
		initializeMutationRate(mu);
		initializeRecombinationRate(r);
		defineConstant('pop_size', N);
		
		
		
		//initialise VGSC sweep mutation
		//1.0 selection coeff, complete dominance, fixed fitness effect
		initializeMutationType('m1', 1.0, 'f', 1.0);
		m0.mutationStackPolicy = "l";
	}
	
	// Main simulation
	main(); {
		initialize();

		// Iterate through parameter combinations for each array index 1-27
		//for (current_combination in 1:NUM_COMBINATIONS) {
		//if (current_combination == array_index){
		// Read burn-in population from file
		readFromPopulationFile(burn_in_files[array_index]);
		
		
		//print out parameters for checking on job logfile
		print("population size:" + pop_size);
		print ("recombination rate:" + recombination_rate);
		print("mutation rate:" + mut_rate);
		print("genome size:" + ge_length);
		
		// Read burn-in population from file
		early() ;{
			sim.readFromPopulationFile(burn_in_files[array_index]);
			sweep = sim.mutationsOfType(m1);
			
			//setSeed 1-10 per each array_index
		seeds = readFile("C:/CHEYANNE STUFF/ICL Biology/Year 3/Final year project/Estimating-effective-population-size-from-resistance-loci/simulations/seeds.txt");
for (seed in seeds) {
seedID = seed
setSeed(seedID);}
		}
		
		// Modify mutation to sweep
		1000:100000 ;
		late(); {
			heterozygosity = calcHeterozygosity(sim.subpopulations.individuals.genomes);
			if (heterozygosity >= 0.8 ) {
				sim.simulationFinished();
				catn('number of generations taken ' + sim.cycle);
				sim.treeSeqOutput("combination_" + current_combination + "_" + seedID+ "_simulation.trees");
			
			}
		}
		
		// Additional late() block for cutoff time point
		100000 ;
		late() ;{
			catn("TIME EXPIRED");
			sim.simulationFinished();
			sim.treeSeqOutput("combination_" + current_combination + "_" + seedID+ "_expired.trees");
		}
	}
}
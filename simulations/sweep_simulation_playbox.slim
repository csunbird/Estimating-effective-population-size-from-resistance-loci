// Initialize parameters
initialize() {
	// Use tree-sequence recording to speed up burn-in
	initializeTreeSeq();
	//defineConstant("seedID", 1811758731);
	defineConstant("NUM_COMBINATIONS", 27);
	defineConstant('ge_length', 10000); //10kb haplotype 
	defineConstant('sweep_site', 5000); //just roughly middle of vgsc gene
	defineConstant('low_site', sweep_site - 1);
	defineConstant('high_site', 1 + sweep_site);
	
	
	//initialise mutations
	//initialise VGSC sweep mutation
	//1.0 selection coeff, complete dominance, fixed fitness effect
	mutationStackPolicy = "l";
	initializeMutationType("m0", 0.5, "f", 0.0); //neutral mutation
	initializeMutationType("m1", 0.5, "f", 0.02); // introduced sweep mutation dominance is likely partial 
	//selection coeff could be 0.02 Khatri et al (e best fit selection coefficient as  0:017)
	
	// Initialize genomic types
	initializeGenomicElementType('g1', m0, 1.0);
	initializeGenomicElement(g1, 0, low_site);
	initializeGenomicElement(g1, high_site, ge_length);
	initializeGenomicElementType('g2', m1, 1.0);
	initializeGenomicElement(g2, sweep_site, sweep_site);
	
	
	// Initialize arrays to store simulation parameters
	N_values = integer(27, fill1=0);
	mutation_rates = float(27);
	recombination_rates = float(27);
	burn_in_files = integer(27, fill1=0);
	
	// Read parameter combinations from parameter combinations.txt file
	i = 0;
	file = readFile("parameter_combinations.txt");
	file = file[substr(file, 0, 1) != "N,"];
	
	for (line in file) {
		tokens = strsplit(line, sep= ",");
		//print("Line:"+ line); 
		//print("Tokens:"+ tokens);  
		N_values[i] = asInteger(tokens[0]);
		mutation_rates[i] = asFloat(tokens[1]);
		recombination_rates[i] = asFloat(tokens[2]);
		burn_in_files[i] = asInteger(tokens[3]);
		i = i + 1;
	}
	//
	//if (!exists("array_index"))
	//defineConstant(array_index, $PBS_ARRAY_INDEX);
	
	//Get job array index from command line
	//array_index = $PBS_ARRAY_INDEX; //ERROR its not picking up the command line parameter
	print(type(array_index));
	// Convert the index to an integer
	//array_index = strToInt(array_index);
	
	// Set parameters for current combination
	N = N_values[array_index];
	mu = mutation_rates[array_index];
	r = recombination_rates[array_index];
	
	initializeMutationRate(mu);
	initializeRecombinationRate(r);
	defineConstant('pop_size', N);
	
	//seed is 
	setSeed(seedID);
	print("seedID: " + seedID);
	
	//print out parameters for checking on job logfile
	print("for Array Index, seed:" + array_index + ','+ seedID);
	print("population size:" + pop_size);
	print ("recombination rate:" + r);
	print("mutation rate:" + mu);
	print("genome size:" + ge_length);


}


// Main simulation, label sweep start as s1
s1 1 early() {
	// Read burn-in population from file
	sim.readFromPopulationFile("burnin_no." + array_index + "._10_.trees");
}

s2 1 late() {
	sweep = sim.mutationsOfType(m1);
	// Modify mutation to sweep
	target = (p0.genomes, 1); //chooses one genome in the subpopulation to add the sweep mutation into
	target.addNewDrawnMutation(m1, 5000); //add sweep mutation m1 at position 5000 in target genome

	//logfile heterozygosity at set timepoints
	log = community.createLogFile(array_index + '_'+ seedID +".csv", logInterval=1000);
	log.addCustomColumn("Array Index", "array_index;");
	log.addCustomColumn("SeedID", "seedID;");
	log.addCycle();
	log.addCustomColumn("Heterozygosity", "calcHeterozygosity(sim.subpopulations.individuals.genomes);");
}


	
1000 late(){
	heterozygosity = calcHeterozygosity(sim.subpopulations.individuals.genomes);
	catn('generation: ' + sim.cycle +', seed_ID: ' + seedID + ', heterozygosity: ' + heterozygosity);
	if (heterozygosity >= 0.8 ) {
		sim.simulationFinished();
		catn(array_index +','+ seedID + ': swept to 80%');
		catn('number of generations taken: ' + sim.cycle);
		
		//output random sample of individuals from population as vcf files? 
		// or use outputMutations() and outputFixedMutations() for whole population BUT not in vcf format
		p0.outputVCFSample(N, outputMultiallelics = T, filePath = "/simulations/" +array_index + '_'+ seedID +'.vcf',  simplifyNucleotides = F);
		//sim.treeSeqOutput("combination_" + array_index + "_" + seedID + "_simulation.trees");
	
	}
	//else 
}

2000 late(){
	heterozygosity = calcHeterozygosity(sim.subpopulations.individuals.genomes);
	catn('generation: ' + sim.cycle +', seed_ID: ' + seedID + ', heterozygosity: ' + heterozygosity);
	if (heterozygosity >= 0.8 ) {
		sim.simulationFinished();
		catn(array_index +','+ seedID + ': swept to 80%');
		catn('number of generations taken: ' + sim.cycle);
		
		//output random sample of individuals from population as vcf files? 
		// or use outputMutations() and outputFixedMutations() for whole population BUT not in vcf format
		p0.outputVCFSample(N, outputMultiallelics = T, filePath = "/simulations/" +array_index + '_'+ seedID +'.vcf',  simplifyNucleotides = F);
		//sim.treeSeqOutput("combination_" + array_index + "_" + seedID + "_simulation.trees");
	
	}
	//else 
}

3000 late(){
	heterozygosity = calcHeterozygosity(sim.subpopulations.individuals.genomes);
	catn('generation: ' + sim.cycle +', seed_ID: ' + seedID + ', heterozygosity: ' + heterozygosity);
	if (heterozygosity >= 0.8 ) {
		sim.simulationFinished();
		catn(array_index +','+ seedID + ': swept to 80%');
		catn('number of generations taken: ' + sim.cycle);
		
		//output random sample of individuals from population as vcf files? 
		// or use outputMutations() and outputFixedMutations() for whole population BUT not in vcf format
		p0.outputVCFSample(N, outputMultiallelics = T, filePath = "/simulations/" +array_index + '_'+ seedID +'.vcf',  simplifyNucleotides = F);
		//sim.treeSeqOutput("combination_" + array_index + "_" + seedID + "_simulation.trees");
	
	}
	//else 
}

4000 late(){
	heterozygosity = calcHeterozygosity(sim.subpopulations.individuals.genomes);
	catn('generation: ' + sim.cycle +', seed_ID: ' + seedID + ', heterozygosity: ' + heterozygosity);
	if (heterozygosity >= 0.8 ) {
		sim.simulationFinished();
		catn(array_index +','+ seedID + ': swept to 80%');
		catn('number of generations taken: ' + sim.cycle);
		
		//output random sample of individuals from population as vcf files? 
		// or use outputMutations() and outputFixedMutations() for whole population BUT not in vcf format
		p0.outputVCFSample(N, outputMultiallelics = T, filePath = "/simulations/" +array_index + '_'+ seedID +'.vcf',  simplifyNucleotides = F);
		//sim.treeSeqOutput("combination_" + array_index + "_" + seedID + "_simulation.trees");
	
	}
	//else 
}

5000 late(){
	heterozygosity = calcHeterozygosity(sim.subpopulations.individuals.genomes);
	catn('generation: ' + sim.cycle +', seed_ID: ' + seedID + ', heterozygosity: ' + heterozygosity);
	if (heterozygosity >= 0.8 ) {
		sim.simulationFinished();
		catn(array_index +','+ seedID + ': swept to 80%');
		catn('number of generations taken: ' + sim.cycle);
		
		//output random sample of individuals from population as vcf files? 
		// or use outputMutations() and outputFixedMutations() for whole population BUT not in vcf format
		p0.outputVCFSample(N, outputMultiallelics = T, filePath = "/simulations/" +array_index + '_'+ seedID +'.vcf',  simplifyNucleotides = F);
		//sim.treeSeqOutput("combination_" + array_index + "_" + seedID + "_simulation.trees");
	
	}
	//else 
}

6000 late(){
	heterozygosity = calcHeterozygosity(sim.subpopulations.individuals.genomes);
	catn('generation: ' + sim.cycle +', seed_ID: ' + seedID + ', heterozygosity: ' + heterozygosity);
	if (heterozygosity >= 0.8 ) {
		sim.simulationFinished();
		catn(array_index +','+ seedID + ': swept to 80%');
		catn('number of generations taken: ' + sim.cycle);
		
		//output random sample of individuals from population as vcf files? 
		// or use outputMutations() and outputFixedMutations() for whole population BUT not in vcf format
		p0.outputVCFSample(N, outputMultiallelics = T, filePath = "/simulations/" +array_index + '_'+ seedID +'.vcf',  simplifyNucleotides = F);
		//sim.treeSeqOutput("combination_" + array_index + "_" + seedID + "_simulation.trees");
	
	}
	//else 
}

7000 late(){
	heterozygosity = calcHeterozygosity(sim.subpopulations.individuals.genomes);
	catn('generation: ' + sim.cycle +', seed_ID: ' + seedID + ', heterozygosity: ' + heterozygosity);
	if (heterozygosity >= 0.8 ) {
		sim.simulationFinished();
		catn(array_index +','+ seedID + ': swept to 80%');
		catn('number of generations taken: ' + sim.cycle);
		
		//output random sample of individuals from population as vcf files? 
		// or use outputMutations() and outputFixedMutations() for whole population BUT not in vcf format
		p0.outputVCFSample(N, outputMultiallelics = T, filePath = "/simulations/" +array_index + '_'+ seedID +'.vcf',  simplifyNucleotides = F);
		//sim.treeSeqOutput("combination_" + array_index + "_" + seedID + "_simulation.trees");
	
	}
	//else 
}

8000 late(){
	heterozygosity = calcHeterozygosity(sim.subpopulations.individuals.genomes);
	catn('generation: ' + sim.cycle +', seed_ID: ' + seedID + ', heterozygosity: ' + heterozygosity);
	if (heterozygosity >= 0.8 ) {
		sim.simulationFinished();
		catn(array_index +','+ seedID + ': swept to 80%');
		catn('number of generations taken: ' + sim.cycle);
		
		//output random sample of individuals from population as vcf files? 
		// or use outputMutations() and outputFixedMutations() for whole population BUT not in vcf format
		p0.outputVCFSample(N, outputMultiallelics = T, filePath = "/simulations/" +array_index + '_'+ seedID +'.vcf',  simplifyNucleotides = F);
		//sim.treeSeqOutput("combination_" + array_index + "_" + seedID + "_simulation.trees");
	
	}
	//else 
}


9000 late(){
	heterozygosity = calcHeterozygosity(sim.subpopulations.individuals.genomes);
	catn('generation: ' + sim.cycle +', seed_ID: ' + seedID + ', heterozygosity: ' + heterozygosity);
	if (heterozygosity >= 0.8 ) {
		sim.simulationFinished();
		catn(array_index +','+ seedID + ': swept to 80%');
		catn('number of generations taken: ' + sim.cycle);
		
		//output random sample of individuals from population as vcf files? 
		// or use outputMutations() and outputFixedMutations() for whole population BUT not in vcf format
		p0.outputVCFSample(N, outputMultiallelics = T, filePath = "/simulations/" +array_index + '_'+ seedID +'.vcf',  simplifyNucleotides = F);
		//sim.treeSeqOutput("combination_" + array_index + "_" + seedID + "_simulation.trees");
	
	}
	//else 
}

10000 late(){
	heterozygosity = calcHeterozygosity(sim.subpopulations.individuals.genomes);
	catn('generation: ' + sim.cycle +', seed_ID: ' + seedID + ', heterozygosity: ' + heterozygosity);
	if (heterozygosity >= 0.8 ) {
		sim.simulationFinished();
		catn(array_index +','+ seedID + ': swept to 80%');
		catn('number of generations taken: ' + sim.cycle);
		
		//output random sample of individuals from population as vcf files? 
		// or use outputMutations() and outputFixedMutations() for whole population BUT not in vcf format
		p0.outputVCFSample(N, outputMultiallelics = T, filePath = "/simulations/" +array_index + '_'+ seedID +'.vcf',  simplifyNucleotides = F);
		//sim.treeSeqOutput("combination_" + array_index + "_" + seedID + "_simulation.trees");
	
	}
	//else 
}

15000 late(){
	heterozygosity = calcHeterozygosity(sim.subpopulations.individuals.genomes);
	catn('generation: ' + sim.cycle +', seed_ID: ' + seedID + ', heterozygosity: ' + heterozygosity);
	if (heterozygosity >= 0.8 ) {
		sim.simulationFinished();
		catn(array_index +','+ seedID + ': swept to 80%');
		catn('number of generations taken: ' + sim.cycle);
		
		//output random sample of individuals from population as vcf files? 
		// or use outputMutations() and outputFixedMutations() for whole population BUT not in vcf format
		p0.outputVCFSample(N, outputMultiallelics = T, filePath = "/simulations/" +array_index + '_'+ seedID +'.vcf',  simplifyNucleotides = F);
		//sim.treeSeqOutput("combination_" + array_index + "_" + seedID + "_simulation.trees");
	
	}
	//else 
}

20000 late(){
	heterozygosity = calcHeterozygosity(sim.subpopulations.individuals.genomes);
	catn('generation: ' + sim.cycle +', seed_ID: ' + seedID + ', heterozygosity: ' + heterozygosity);
	if (heterozygosity >= 0.8 ) {
		sim.simulationFinished();
		catn(array_index +','+ seedID + ': swept to 80%');
		catn('number of generations taken: ' + sim.cycle);
		
		//output random sample of individuals from population as vcf files? 
		// or use outputMutations() and outputFixedMutations() for whole population BUT not in vcf format
		p0.outputVCFSample(N, outputMultiallelics = T, filePath = "/simulations/" +array_index + '_'+ seedID +'.vcf',  simplifyNucleotides = F);
		//sim.treeSeqOutput("combination_" + array_index + "_" + seedID + "_simulation.trees");
	
	}
	//else 
}

25000 late(){
	heterozygosity = calcHeterozygosity(sim.subpopulations.individuals.genomes);
	catn('generation: ' + sim.cycle +', seed_ID: ' + seedID + ', heterozygosity: ' + heterozygosity);
	if (heterozygosity >= 0.8 ) {
		sim.simulationFinished();
		catn(array_index +','+ seedID + ': swept to 80%');
		catn('number of generations taken: ' + sim.cycle);
		
		//output random sample of individuals from population as vcf files? 
		// or use outputMutations() and outputFixedMutations() for whole population BUT not in vcf format
		p0.outputVCFSample(N, outputMultiallelics = T, filePath = "/simulations/" +array_index + '_'+ seedID +'.vcf',  simplifyNucleotides = F);
		//sim.treeSeqOutput("combination_" + array_index + "_" + seedID + "_simulation.trees");
	
	}
	//else 
}

30000 late(){
	heterozygosity = calcHeterozygosity(sim.subpopulations.individuals.genomes);
	catn('generation: ' + sim.cycle +', seed_ID: ' + seedID + ', heterozygosity: ' + heterozygosity);
	if (heterozygosity >= 0.8 ) {
		sim.simulationFinished();
		catn(array_index +','+ seedID + ': swept to 80%');
		catn('number of generations taken: ' + sim.cycle);
		
		//output random sample of individuals from population as vcf files? 
		// or use outputMutations() and outputFixedMutations() for whole population BUT not in vcf format
		p0.outputVCFSample(N, outputMultiallelics = T, filePath = "/simulations/" +array_index + '_'+ seedID +'.vcf',  simplifyNucleotides = F);
		//sim.treeSeqOutput("combination_" + array_index + "_" + seedID + "_simulation.trees");
	
	}
	//else 
}

35000 late(){
	heterozygosity = calcHeterozygosity(sim.subpopulations.individuals.genomes);
	catn('generation: ' + sim.cycle +', seed_ID: ' + seedID + ', heterozygosity: ' + heterozygosity);
	if (heterozygosity >= 0.8 ) {
		sim.simulationFinished();
		catn(array_index +','+ seedID + ': swept to 80%');
		catn('number of generations taken: ' + sim.cycle);
		
		//output random sample of individuals from population as vcf files? 
		// or use outputMutations() and outputFixedMutations() for whole population BUT not in vcf format
		p0.outputVCFSample(N, outputMultiallelics = T, filePath = "/simulations/" +array_index + '_'+ seedID +'.vcf',  simplifyNucleotides = F);
		//sim.treeSeqOutput("combination_" + array_index + "_" + seedID + "_simulation.trees");
	
	}
	//else 
}

40000 late(){
	heterozygosity = calcHeterozygosity(sim.subpopulations.individuals.genomes);
	catn('generation: ' + sim.cycle +', seed_ID: ' + seedID + ', heterozygosity: ' + heterozygosity);
	if (heterozygosity >= 0.8 ) {
		sim.simulationFinished();
		catn(array_index +','+ seedID + ': swept to 80%');
		catn('number of generations taken: ' + sim.cycle);
		
		//output random sample of individuals from population as vcf files? 
		// or use outputMutations() and outputFixedMutations() for whole population BUT not in vcf format
		p0.outputVCFSample(N, outputMultiallelics = T, filePath = "/simulations/" +array_index + '_'+ seedID +'.vcf',  simplifyNucleotides = F);
		//sim.treeSeqOutput("combination_" + array_index + "_" + seedID + "_simulation.trees");
	
	}
	//else 
}

45000 late(){
	heterozygosity = calcHeterozygosity(sim.subpopulations.individuals.genomes);
	catn('generation: ' + sim.cycle +', seed_ID: ' + seedID + ', heterozygosity: ' + heterozygosity);
	if (heterozygosity >= 0.8 ) {
		sim.simulationFinished();
		catn(array_index +','+ seedID + ': swept to 80%');
		catn('number of generations taken: ' + sim.cycle);
		
		//output random sample of individuals from population as vcf files? 
		// or use outputMutations() and outputFixedMutations() for whole population BUT not in vcf format
		p0.outputVCFSample(N, outputMultiallelics = T, filePath = "/simulations/" +array_index + '_'+ seedID +'.vcf',  simplifyNucleotides = F);
		//sim.treeSeqOutput("combination_" + array_index + "_" + seedID + "_simulation.trees");
	
	}
	//else 
}

50000 late(){
	heterozygosity = calcHeterozygosity(sim.subpopulations.individuals.genomes);
	catn('generation: ' + sim.cycle +', seed_ID: ' + seedID + ', heterozygosity: ' + heterozygosity);
	if (heterozygosity >= 0.8 ) {
		sim.simulationFinished();
		catn(array_index +','+ seedID + ': swept to 80%');
		catn('number of generations taken: ' + sim.cycle);
		
		//output random sample of individuals from population as vcf files? 
		// or use outputMutations() and outputFixedMutations() for whole population BUT not in vcf format
		p0.outputVCFSample(N, outputMultiallelics = T, filePath = "/simulations/" +array_index + '_'+ seedID +'.vcf',  simplifyNucleotides = F);
		//sim.treeSeqOutput("combination_" + array_index + "_" + seedID + "_simulation.trees");
	
	}
	//else 
}

55000 late(){
	heterozygosity = calcHeterozygosity(sim.subpopulations.individuals.genomes);
	catn('generation: ' + sim.cycle +', seed_ID: ' + seedID + ', heterozygosity: ' + heterozygosity);
	if (heterozygosity >= 0.8 ) {
		sim.simulationFinished();
		catn(array_index +','+ seedID + ': swept to 80%');
		catn('number of generations taken: ' + sim.cycle);
		
		//output random sample of individuals from population as vcf files? 
		// or use outputMutations() and outputFixedMutations() for whole population BUT not in vcf format
		p0.outputVCFSample(N, outputMultiallelics = T, filePath = "/simulations/" +array_index + '_'+ seedID +'.vcf',  simplifyNucleotides = F);
		//sim.treeSeqOutput("combination_" + array_index + "_" + seedID + "_simulation.trees");
	
	}
	//else 
}

60000 late(){
	heterozygosity = calcHeterozygosity(sim.subpopulations.individuals.genomes);
	catn('generation: ' + sim.cycle +', seed_ID: ' + seedID + ', heterozygosity: ' + heterozygosity);
	if (heterozygosity >= 0.8 ) {
		sim.simulationFinished();
		catn(array_index +','+ seedID + ': swept to 80%');
		catn('number of generations taken: ' + sim.cycle);
		
		//output random sample of individuals from population as vcf files? 
		// or use outputMutations() and outputFixedMutations() for whole population BUT not in vcf format
		p0.outputVCFSample(N, outputMultiallelics = T, filePath = "/simulations/" +array_index + '_'+ seedID +'.vcf',  simplifyNucleotides = F);
		//sim.treeSeqOutput("combination_" + array_index + "_" + seedID + "_simulation.trees");
	
	}
	//else 
}

// Additional late() block for cutoff time point
100000 late(){
	heterozygosity = calcHeterozygosity(sim.subpopulations.individuals.genomes);
	catn("array index, seedID: "+ array_index + "," + seedID + " TIME EXPIRED");
	catn(heterozygosity: ' + heterozygosity);
	sim.simulationFinished();
	sim.treeSeqOutput("combination_" + array_index + "_" + seedID + "_expired.trees");
}